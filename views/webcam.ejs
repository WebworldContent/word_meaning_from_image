<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <script src="https://cdn.jsdelivr.net/npm/jquery@3.6.3/dist/jquery.slim.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.1/dist/umd/popper.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.6.2/dist/js/bootstrap.bundle.min.js"></script>
    <title>Webcam</title>
</head>

<body>
    <div class="container">
        <div class="row">
            <div style="display: flex; flex-direction: column; align-items: center;">
                <video id="video" style="width: 700px;" autoplay></video>
                <div id="snap"
                    style="height: 150px; width: 150px; border-radius: 50%; text-align: center; background-color: aquamarine; color: black; padding: 10px; font-size:x-large; line-height: 6;cursor: pointer;">
                    Capture!
                </div>
                <canvas id="canvas" width="700" height="400"></canvas>
            </div>
        </div>
        <div class="row">
            <form action="/processed" method="POST">
                <input name="imageData" id="imageData" value="" hidden>
                <button type="submit" id="submitBtn" hidden>Data</button>
            </form>
        </div>
    </div>

    <script>

        const video = document.getElementById('video');
        const snap = document.getElementById('snap');
        const canvas = document.getElementById('canvas');

        const constraints = {
            audio: false,
            video: {
                width: {
                    min: 1024,
                    ideal: 1280,
                    max: 1920
                },
                heigth: {
                    min: 576,
                    ideal: 720,
                    max: 1080
                }
            }
        };

        async function startWebCam(constraint) {
            try {
                const stream = await navigator.mediaDevices.getUserMedia(constraint);
                video.srcObject = stream;
                window.stream = stream;
            } catch (err) {
                console.log(err.toString());
            }
        }

        function saveImage() {
            const canvas = document.getElementById('canvas');
            const dataURL = canvas.toDataURL('image/png', 0.5);
            const base64Data = dataURL.replace(/^data:image\/png;base64,/, '');
            return base64Data;
        }

        function captureImage() {
            new Promise((resolve) => {
                setTimeout(() => {
                    const data = saveImage();
                    resolve(data);
                }, 1000);
            }).then((data) => {
                document.querySelector('#imageData').value = data
                document.querySelector('#submitBtn').click();
            })
        }

        let context = canvas.getContext('2d');

        snap.addEventListener('click', () => {
            context.drawImage(video, 0, 0, 700, 400);
            captureImage()
        });

        startWebCam(constraints);

    </script>

</body>

</html>